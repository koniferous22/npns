version: "3.8"
services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_GATEWAY_ALPINE
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    volumes:
      - ./gateway:/usr/src/gateway
    environment:
      PORT: ${GATEWAY_PORT}
      ACCOUNT_SERVICE_HOST: http://${ACCOUNT_SERVICE_CONTAINER_NAME}
      ACCOUNT_SERVICE_PORT: ${ACCOUNT_SERVICE_PORT}
      ACCOUNT_SERVICE_GRAPHQL_PATH: ${ACCOUNT_SERVICE_GRAPHQL_PATH}
      ACCOUNT_SERVICE_JWT_SECRET: ${ACCOUNT_SERVICE_JWT_SECRET}
      ACCOUNT_SERVICE_JWT_ALGORITHM: ${ACCOUNT_SERVICE_JWT_ALGORITHM}
      CHALLENGE_SERVICE_HOST: http://${CHALLENGE_SERVICE_CONTAINER_NAME}
      CHALLENGE_SERVICE_PORT: ${CHALLENGE_SERVICE_PORT}
      CHALLENGE_SERVICE_GRAPHQL_PATH: ${CHALLENGE_SERVICE_GRAPHQL_PATH}
    depends_on:
      - challenge_service
      - account_service
    container_name: ${GATEWAY_CONTAINER_NAME}
    networks: 
      - frontend
      - backend_account
      - backend_challenge
  multi_write_proxy:
    build:
      context: ./multi-write-proxy
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_MULTI_WRITE_PROXY_ALPINE
    ports:
      - ${MULTI_WRITE_PROXY_PORT}:${MULTI_WRITE_PROXY_PORT}
    volumes:
      - ./multi-write-proxy:/usr/src/multi-write-proxy
    environment:
      PORT: ${MULTI_WRITE_PROXY_PORT}
      GRAPHQL_PATH: ${MULTI_WRITE_PROXY_GRAPHQL_PATH}
      ACCOUNT_SERVICE_HOST: http://${ACCOUNT_SERVICE_CONTAINER_NAME}
      ACCOUNT_SERVICE_PORT: ${ACCOUNT_SERVICE_PORT}
      ACCOUNT_SERVICE_GRAPHQL_PATH: ${ACCOUNT_SERVICE_GRAPHQL_PATH}
      CHALLENGE_SERVICE_HOST: http://${CHALLENGE_SERVICE_CONTAINER_NAME}
      CHALLENGE_SERVICE_PORT: ${CHALLENGE_SERVICE_PORT}
      CHALLENGE_SERVICE_GRAPHQL_PATH: ${CHALLENGE_SERVICE_GRAPHQL_PATH}
      HMAC_SECRET: ${MULTI_WRITE_PROXY_HMAC_SECRET}
      HMAC_ALGORITHM: ${MULTI_WRITE_PROXY_HMAC_ALGORITHM}
    depends_on:
      - challenge_service
      - account_service
    container_name: ${MULTI_WRITE_PROXY_CONTAINER_NAME}
    networks: 
      - backend_account
      - backend_challenge
  account_service:
    build: 
      context: ./services/account
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_ACCOUNT_SERVICE_ALPINE
    ports:
      - ${ACCOUNT_SERVICE_PORT}:${ACCOUNT_SERVICE_PORT}
    volumes:
      - ./services/account:/usr/src/account-service
    environment: 
      PORT: ${ACCOUNT_SERVICE_PORT}
      GRAPHQL_PATH: ${ACCOUNT_SERVICE_GRAPHQL_PATH}
      JWT_SECRET: ${ACCOUNT_SERVICE_JWT_SECRET}
      JWT_ALGORITHM: ${ACCOUNT_SERVICE_JWT_ALGORITHM}
      VERIFICATION_TOKEN_CACHE_HOST: verification_token_cache
      VERIFICATION_TOKEN_CACHE_PORT: ${VERIFICATION_TOKEN_CACHE_PORT}
      VERIFICATION_TOKEN_CACHE_PASSWORD: ${VERIFICATION_TOKEN_CACHE_PASSWORD}
      VERIFICATION_TOKEN_EXPIRATION_TIME: ${VERIFICATION_TOKEN_EXPIRATION_TIME}
      NODEMAILER_HOST: ${ACCOUNT_SERVICE_NODEMAILER_HOST}
      NODEMAILER_PORT: ${ACCOUNT_SERVICE_NODEMAILER_PORT}
      NODEMAILER_USER: ${ACCOUNT_SERVICE_NODEMAILER_USER}
      NODEMAILER_PASSWORD: ${ACCOUNT_SERVICE_NODEMAILER_PASSWORD}
      NOTIFICATION_SENDER_EMAIL: ${ACCOUNT_SERVICE_NOTIFICATION_SENDER_EMAIL}
      WEB_APP_ADDRESS: http://localhost:3000
      ACCOUNT_DB_TYPE: postgres
      ACCOUNT_DB_HOST: account_challenge_db
      ACCOUNT_DB_PORT: ${ACCOUNT_POSTGRES_PORT}
      ACCOUNT_DB_USERNAME: ${ACCOUNT_POSTGRES_USER}
      ACCOUNT_DB_PASSWORD: ${ACCOUNT_POSTGRES_PASSWORD}
      ACCOUNT_DB_DATABASE: ${ACCOUNT_POSTGRES_DATABASE}
      MULTI_WRITE_PROXY_HMAC_SECRET: ${MULTI_WRITE_PROXY_HMAC_SECRET}
      MULTI_WRITE_PROXY_HMAC_ALGORITHM: ${MULTI_WRITE_PROXY_HMAC_ALGORITHM}
    depends_on: 
      - account_challenge_db
      - verification_token_cache
    container_name: ${ACCOUNT_SERVICE_CONTAINER_NAME}
    networks: 
      - backend_account
  verification_token_cache:
    image: redis:${IMAGE_TAG_REDIS}
    ports:
      - ${VERIFICATION_TOKEN_CACHE_PORT}:${VERIFICATION_TOKEN_CACHE_PORT}
    command: redis-server --requirepass ${VERIFICATION_TOKEN_CACHE_PASSWORD} --port ${VERIFICATION_TOKEN_CACHE_PORT}
    networks: 
      - backend_account
  challenge_service:
    build:
      context: ./services/challenge
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_CHALLENGE_SERVICE_ALPINE
    ports:
      - ${CHALLENGE_SERVICE_PORT}:${CHALLENGE_SERVICE_PORT}
    volumes:
      - ./services/challenge:/usr/src/challenge-service
    environment:
      PORT: ${CHALLENGE_SERVICE_PORT}
      GRAPHQL_PATH: ${CHALLENGE_SERVICE_GRAPHQL_PATH}
      CHALLENGE_DB_TYPE: postgres
      CHALLENGE_DB_HOST: account_challenge_db
      CHALLENGE_DB_PORT: ${CHALLENGE_POSTGRES_PORT}
      CHALLENGE_DB_USERNAME: ${CHALLENGE_POSTGRES_USER}
      CHALLENGE_DB_PASSWORD: ${CHALLENGE_POSTGRES_PASSWORD}
      CHALLENGE_DB_DATABASE: ${CHALLENGE_POSTGRES_DATABASE}
      GRID_FS_MAX_FILES: ${CHALLENGE_SERVICE_GRID_FS_MAX_FILES}
      GRID_FS_MAX_FILE_SIZE: ${CHALLENGE_SERVICE_GRID_FS_MAX_FILE_SIZE}
      LIMIT_CONTENT_UPLOADS: ${CHALLENGE_SERVICE_LIMIT_CONTENT_UPLOADS}
      LIMIT_EDIT_COUNT: ${CHALLENGE_SERVICE_LIMIT_EDIT_COUNT}
      CONTENT_DB_TYPE: mongodb
      CONTENT_DB_HOST: content_db
      CONTENT_DB_PORT: ${CONTENT_MONGODB_PORT}
      CONTENT_DB_USERNAME: ${CONTENT_MONGODB_USER}
      CONTENT_DB_PASSWORD: ${CONTENT_MONGODB_PASSWORD}
      CONTENT_DB_DATABASE: ${CONTENT_MONGODB_DATABASE}
      MULTI_WRITE_PROXY_HMAC_SECRET: ${MULTI_WRITE_PROXY_HMAC_SECRET}
      MULTI_WRITE_PROXY_HMAC_ALGORITHM: ${MULTI_WRITE_PROXY_HMAC_ALGORITHM}
    depends_on:
      - account_challenge_db
      - content_db 
    container_name: ${CHALLENGE_SERVICE_CONTAINER_NAME}
    networks: 
      - backend_challenge
  account_challenge_db:
    image: "postgres:${IMAGE_TAG_POSTGRES}"
    ports:
      - ${ACCOUNT_POSTGRES_PORT}:${ACCOUNT_POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${ACCOUNT_POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${ACCOUNT_POSTGRES_ROOT_PASSWORD}
    volumes: 
      - ./.docker/account_challenge_db:/var/lib/postgresql/data
      - ./.docker/postgres-scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks: 
      - backend_challenge
      - backend_account
      - backoffice
  content_db:
    image: "mongo:${IMAGE_TAG_MONGO}"
    ports:
      - ${CONTENT_MONGODB_PORT}:${CONTENT_MONGODB_PORT}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CONTENT_MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${CONTENT_MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${CONTENT_MONGODB_DATABASE}
    volumes:
      - ./.docker/content_db:/data/db
    command: mongod --auth
    networks: 
      - backend_challenge
      - backoffice
  pgadmin:
    image: dpage/pgadmin4:${IMAGE_TAG_PGADMIN}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD} 
      PGADMIN_LISTEN_PORT: 80
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - ./.docker/pgadmin:/var/lib/pgadmin
    depends_on:
      - account_challenge_db 
    networks:
      - backoffice
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${CONTENT_MONGODB_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${CONTENT_MONGODB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: content_db
    depends_on:
      - content_db
    networks: 
      - backoffice
      
networks: 
  frontend:
    driver: bridge
  backend_account:
    driver: bridge
  backend_challenge:
    driver: bridge
  backoffice:
    driver: bridge
