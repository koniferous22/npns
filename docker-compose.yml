version: "3.8"
services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_GATEWAY_ALPINE
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    volumes:
      - ./gateway:/usr/src/gateway
    environment:
      - PORT=${GATEWAY_PORT}
      - TAG_SERVICE_HOST=http://${TAG_SERVICE_CONTAINER_NAME}
      - TAG_SERVICE_PORT=${TAG_SERVICE_PORT}
      - TAG_SERVICE_GRAPHQL_PATH=${TAG_SERVICE_GRAPHQL_PATH}
      - ACCOUNT_SERVICE_HOST=http://${ACCOUNT_SERVICE_CONTAINER_NAME}
      - ACCOUNT_SERVICE_PORT=${ACCOUNT_SERVICE_PORT}
      - ACCOUNT_SERVICE_GRAPHQL_PATH=${ACCOUNT_SERVICE_GRAPHQL_PATH}
      - CHALLENGE_DB_TYPE=mongodb
      - CHALLENGE_DB_HOST=challenge_db
      - CHALLENGE_DB_PORT=${CHALLENGE_MONGODB_PORT}
      - CHALLENGE_DB_USERNAME=${CHALLENGE_MONGODB_USER}
      - CHALLENGE_DB_PASSWORD=${CHALLENGE_MONGODB_PASSWORD}
      - CHALLENGE_DB_DATABASE=${CHALLENGE_MONGODB_DATABASE}
    depends_on:
      - tag_service
      - account_service
      - challenge_db
    container_name: ${GATEWAY_CONTAINER_NAME}
    networks: 
      - frontend
      - backend_account
      - backend_challenge
  tag_service:
    build:
      context: ./services/tag
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_TAG_SERVICE_ALPINE
    ports:
      - ${TAG_SERVICE_PORT}:${TAG_SERVICE_PORT}
    volumes:
      - ./services/tag:/usr/src/tag-service
    environment:
      - PORT=${TAG_SERVICE_PORT}
      - GRAPHQL_PATH=${TAG_SERVICE_GRAPHQL_PATH}
      - TAG_DB_TYPE=postgres
      - TAG_DB_HOST=account_tag_db
      - TAG_DB_PORT=${TAG_POSTGRES_PORT}
      - TAG_DB_USERNAME=${TAG_POSTGRES_USER}
      - TAG_DB_PASSWORD=${TAG_POSTGRES_PASSWORD}
      - TAG_DB_DATABASE=${TAG_POSTGRES_DATABASE}
    depends_on:
      - account_tag_db
    container_name: ${TAG_SERVICE_CONTAINER_NAME}
    networks: 
      - backend_challenge
  account_service:
    build: 
      context: ./services/account
      dockerfile: Dockerfile
      args:
        - NODE_ENV
        - IMAGE_TAG_ACCOUNT_SERVICE_ALPINE
    ports:
      - ${ACCOUNT_SERVICE_PORT}:${ACCOUNT_SERVICE_PORT}
    volumes:
      - ./services/account:/usr/src/account-service
    environment: 
      - PORT=${ACCOUNT_SERVICE_PORT}
      - GRAPHQL_PATH=${ACCOUNT_SERVICE_GRAPHQL_PATH}
      - VERIFICATION_TOKEN_CACHE_HOST=verification_token_cache
      - VERIFICATION_TOKEN_CACHE_PORT=${VERIFICATION_TOKEN_CACHE_PORT}
      - VERIFICATION_TOKEN_CACHE_PASSWORD=${VERIFICATION_TOKEN_CACHE_PASSWORD}
      - VERIFICATION_TOKEN_EXPIRATION_TIME=${VERIFICATION_TOKEN_EXPIRATION_TIME}
      - NODEMAILER_HOST=${ACCOUNT_SERVICE_NODEMAILER_HOST}
      - NODEMAILER_PORT=${ACCOUNT_SERVICE_NODEMAILER_PORT}
      - NODEMAILER_USER=${ACCOUNT_SERVICE_NODEMAILER_USER}
      - NODEMAILER_PASSWORD=${ACCOUNT_SERVICE_NODEMAILER_PASSWORD}
      - NOTIFICATION_SENDER_EMAIL=${ACCOUNT_SERVICE_NOTIFICATION_SENDER_EMAIL}
      - WEB_APP_ADDRESS=http://localhost:3000
      - ACCOUNT_DB_TYPE=postgres
      - ACCOUNT_DB_HOST=account_tag_db
      - ACCOUNT_DB_PORT=${ACCOUNT_POSTGRES_PORT}
      - ACCOUNT_DB_USERNAME=${ACCOUNT_POSTGRES_USER}
      - ACCOUNT_DB_PASSWORD=${ACCOUNT_POSTGRES_PASSWORD}
      - ACCOUNT_DB_DATABASE=${ACCOUNT_POSTGRES_DATABASE}
    depends_on: 
      - account_tag_db
      - verification_token_cache
    container_name: ${ACCOUNT_SERVICE_CONTAINER_NAME}
    networks: 
      - backend_account
  verification_token_cache:
    image: redis:${IMAGE_TAG_REDIS}
    ports:
      - ${VERIFICATION_TOKEN_CACHE_PORT}:${VERIFICATION_TOKEN_CACHE_PORT}
    command: redis-server --requirepass ${VERIFICATION_TOKEN_CACHE_PASSWORD} --port ${VERIFICATION_TOKEN_CACHE_PORT}
    networks: 
      - backend_account
  account_tag_db:
    image: "postgres:${IMAGE_TAG_POSTGRES}"
    ports:
      - ${ACCOUNT_POSTGRES_PORT}:${ACCOUNT_POSTGRES_PORT}
    environment:
      - POSTGRES_USER=${ACCOUNT_POSTGRES_ROOT_USER}
      - POSTGRES_PASSWORD=${ACCOUNT_POSTGRES_ROOT_PASSWORD}
    volumes: 
      - ./.docker/account_tag_db:/var/lib/postgresql/data
      - ./.docker/postgres-scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks: 
      - backend_challenge
      - backend_account
      - backoffice
  challenge_db:
    image: "mongo:${IMAGE_TAG_MONGO}"
    ports:
      - ${CHALLENGE_MONGODB_PORT}:${CHALLENGE_MONGODB_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${CHALLENGE_MONGODB_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${CHALLENGE_MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${CHALLENGE_MONGODB_DATABASE}
    volumes:
      - ./.docker/challenge_db:/data/db
    command: mongod --auth
    networks: 
      - backend_challenge
      - backoffice
  pgadmin:
    image: dpage/pgadmin4:${IMAGE_TAG_PGADMIN}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD} 
      PGADMIN_LISTEN_PORT: 80
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - ./.docker/pgadmin:/var/lib/pgadmin
    depends_on:
      - account_tag_db 
    networks:
      - backoffice
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${CHALLENGE_MONGODB_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${CHALLENGE_MONGODB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: challenge_db
    depends_on:
      - challenge_db
    networks: 
      - backoffice
      
networks: 
  frontend:
    driver: bridge
  backend_account:
    driver: bridge
  backend_challenge:
    driver: bridge
  backoffice:
    driver: bridge
